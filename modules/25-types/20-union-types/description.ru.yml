---

name: Объединения (Union Types)
theory: |

  Объединение типов играют большую роль в TypeScript, они позволяют выразить обычную для JavaScript ситуацию, когда возвращаемое значение или аргумент функции могут быть различного типа. Например метод `String.prototype.at()` может возвращать значение типа `string`, либо `undefined`.

  Объединение указывается с помощью оператора прямой черты `|`, по обе стороны которого располагаются типы. Давайте определим свой тип для функции `at`:

  ```typescript
  const at = (str: string, position: number): string | undefined => str.at(position);
  ```

  С точки зрения теории множеств, операция union обозначает объединение. Когда мы объединяем несколько множеств, получается новое множество, в которое входят все элементы исходных множеств.

  Применительно к TypeScript это означает, что в результате мы получаем тип, обещающий содержать переменную одного из типов объединения. Так мы можем завести свой тип, под который попадают все строки **ИЛИ** числа:

  ```typescript
  type NumberOrString = number | string;

  let val: NumberOrString = 10; // OK
  val = 'My string'; // OK
  val = true; // Type 'boolean' is not assignable to type 'NumberOrString'.
  ```

  <!-- TODO: добавить картинку -->

  На практике нередко встречаются случаи, когда нам нужно поддержать работу функции с большим количеством типов. В JavaScript мы можем соединить строку не только со строкой, но и числом, булевыми значениями и не только. Для решения похожей задачи в прошлых уроках мы познакомились с перегрузкой функции. Опишем тип такой функции с применением пересечения:

  ```typescript
  type AllowedToConcatenation = number | string | null | undefined | boolean;

  const concat = (base: AllowedToConcatenation, suffix: AllowedToConcatenation): string => `${base}${suffix}`;
  ```

  Для описания типов функции `concat` нам бы потребовалось написать код для каждого случая отдельно.

  Union Types используется повсеместно, где программист хочет сказать, что переменная может содержать значения разных, но заранее описанных типов. Для указания абсолютно произвольных типов может использоваться `unknown` или более конкретные дженерики, которые рассмотрим дальше в курсе.

instructions: |

  Реализуйте функцию `lastIndex(str, char)`, возвращающую индекс последнего вхождения символа в строку или `null`, если такого символа нет.

  ```typescript
  const str = 'test';
  lastIndex(str, 't'); // 3
  lastIndex(str, 'p'); // null
  ```
